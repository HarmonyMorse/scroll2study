rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function isValidUserData(data) {
      return data.keys().hasAll(['id', 'lastActive', 'role', 'preferences', 'profile', 'stats', 'settings', 'createdAt', 'updatedAt']) &&
             data.id is string &&
             data.lastActive is timestamp &&
             data.role in ['creator', 'consumer'] &&
             data.preferences is map &&
             data.profile is map &&
             data.stats is map &&
             data.settings is map &&
             data.createdAt is timestamp &&
             data.updatedAt is timestamp;
    }

    function isValidUserUpdate(data) {
      let unchangeableFields = ['id', 'createdAt', 'role'];
      return !request.resource.data.diff(resource.data).affectedKeys().hasAny(unchangeableFields);
    }

    function isValidStatsUpdate(data) {
      let stats = data.stats;
      return stats is map && 
             ('totalWatchTime' in stats ? stats.totalWatchTime is number : true) &&
             ('completedVideos' in stats ? stats.completedVideos is number : true) &&
             ('lastLoginAt' in stats ? stats.lastLoginAt is timestamp : true);
    }
    
    // Public read access for educational content
    match /subjects/{document} {
      allow read: if true;
      allow write: if false;  // Admin only via backend
    }
    
    match /complexity_levels/{document} {
      allow read: if true;
      allow write: if false;  // Admin only via backend
    }
    
    match /videos/{document} {
      allow read: if true;
      allow write: if false;  // Admin only via backend
    }
    
    // User data - authenticated access only
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;  // Prevent listing all users
      
      allow create: if isOwner(userId) && 
                   isValidUserData(request.resource.data) &&
                   request.resource.data.id == userId;
      
      allow update: if isOwner(userId) && (
                   // Allow full document updates
                   (isValidUserData(request.resource.data) &&
                   isValidUserUpdate(request.resource.data) &&
                   request.resource.data.updatedAt > resource.data.updatedAt)
                   ||
                   // Allow partial stats updates
                   (request.resource.data.keys().hasOnly(['stats', 'updatedAt']) &&
                   isValidStatsUpdate(request.resource.data) &&
                   request.resource.data.updatedAt > resource.data.updatedAt)
                   );
      
      allow delete: if false;  // Prevent user deletion (handled by admin)

      // Saved videos subcollection
      match /savedVideos/{videoId} {
        allow read: if isOwner(userId);
        allow create, update: if isOwner(userId);
        allow delete: if isOwner(userId);
      }
    }
    
    // Progress tracking - authenticated access only
    match /user_progress/{document} {
      allow read: if isAuthenticated() && 
                 resource.data.userId == request.auth.uid;
      allow write: if isAuthenticated() && 
                  request.resource.data.userId == request.auth.uid;
    }
  }
} 